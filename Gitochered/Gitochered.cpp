#include <iostream.h>
#include <stdlib.h>
#include <dos.h>  //для задержек 

//СТРУКТУРА БУДЕТ ЭЛЕМЕНТОМ СПИСКА
/*!
       * Zveno 
       */
  struct Node //или просто Звено списка
    {
       int x;//инфо данные структуры
       Node *Next; //Указатель не следующее звено
    };

//КЛАСС СПИСОК
  /*!
       * List func 
       */
class List
{
    Node *Head,*Tail; //Указатели на начало списка и на конец
public:
     List():Head(NULL),Tail(NULL){}; //Инициализация указателей как пустых
     ~List(); //Деструктор для освобождения памяти от всего что будет
     void Add(int x); //Функция заполнения структуры Node и добавления её в список как элемента
     void Show(); //Функция отображения списка List
     void del(); //Функция изъятия элемента
     void AddByTime(int,int,int); //Добавим новый метод добавления по времени

 };
/*!
       * Destruct
       */

List::~List() //ДЕСТРУКТОР ДЛЯ ОЧИСТКИ ПАМЯТИ
{
 Node *temp=Head; //Временный указатель на начало списка
 while (temp!=NULL) //Пока в списке что-то есть

   {
     temp=Head->Next; //Резерв адреса на следующий элемент списка

     delete Head;  //Освобождение памяти от первой структуры как элемента списка

     Head=temp;  //Сдвиг начала на следующий адрес, который берем из резерва

   }
}


//ФУНКЦИЯ ЗАПОЛНЕНИЯ ИНФОРМАЦИОННЫХ ПОЛЕЙ СТРУКТУРЫ NODE И ДОБАВЛЕНИЯ ЭТОЙ СТРУКТУРЫ В СПИСОК
/*!
       * Input func 
       */
void List::Add(int x)
{
    Node *temp=new Node; //Выделение памяти для нового звена списка
    temp->x=x; //Временное запоминание принятого параметра x
    temp->Next=NULL; //Указание, что следующее звено новосозданной структуры пока пустое

    if (Head!=NULL) //Если список не пуст
    {
    Tail->Next=temp; //Указание, что следующее звено списка это новосозданная структура
    Tail=temp;
    }     else Head=Tail=temp; //Если список не пуст, добавление первого элемента
}

//ФУНКЦИЯ ОТОБРАЖЕНИЯ СПИСКА НА ЭКРАНЕ
void List::Show()
{
    Node *temp=Head; //Временный указатель на начало списка
     while (temp!=NULL) //Пока в списке что-то встречается
     {
     cout<<temp->x<<" "; //Выводим значения из списка на экран
     temp=temp->Next; //Сдвигаем указатель на начало на адрес следующего элемента
     }
    cout<<endl;
}


/*!
       * output func 
       */
//ФУНКЦИЯ ИЗЪЯТИЯ ЭЛЕМЕНТА ИЗ ОЧЕРЕДИ
void List::del()
{
    if (Head!=NULL)  //Если список не пустой
    {
    Node *temp=Head; //Обращаемся к началу списка с помощью вспомогательного указателя
    cout<<"ЭЛЕМЕНТ "<<Head->x<<" ВЫШЕЛ"<<endl;
    Head=Head->Next; //Сдвиг начала списка
    delete temp; //Освобождение памяти от предыдущего звена списка
    }
}

/*Новый метод добавления элементов по времени*/
void List::AddByTime(int startx,int endx, int max_wait)   //от скольки до скольки элементов добавлять и промежуток времени ожидания
{

     srand(time(0)); //включаем генерацию случайных значений
     int max   = 0; //ожидаемый максимум элементов для добавления в очередь
     int count = 0; //переменная для выхода из цикла
     int temp  = 0; //случайное значение, в зависимости от которой элемент или добавиться в очередь или нет
     int el    = 0; //элемент
     int sum   = 0; //сумма пропущенных элементов

     max = startx+rand()%(endx-startx); //Выбираем случайный ожидаемый максимум
     cout<<"Ожидаемый максимум элементов = "<<max<<"\n";

     while (count<max)
     {
       temp = rand()%max_wait+1; //выбираем сколько ждать случайным образом
       el   = startx+rand()%(endx-startx); //выбираем случайный элемент

       if (temp>=max_wait) //если ожидание больше или равно чем допустимый максимум ожидания, то
       {
       cout<<el; 
       cout<<" ждет"<<temp<<" минут ";
       sleep(temp*60);
       cout<<"\tПропущен­\n";
       sum+=el;
       }
       else  //иначе
       {
       cout<<el;
       cout<<" ждет  "<<temp<<" минут ";
       sleep(temp*60);
       cout<<"\tЗаписан ­\n";
       Add(el); //добавили в очередь
       }
       count++;

       if (count == max) break; //это чтоб не ждать лишний раз при окончании работы цикла
     }
     cout<<"\nСумма пропущенных = "<<sum;
}
/*!
       * Main func 
       */

void main()
{
   List lst;
   system("CLS");

      lst.AddByTime(1,7,2); //Выбираем элементы от 1 до 7, элементы появляются каждые 2 минуты, но потом какое-то время ждут

      cout<<"\nОчередь:  ";
      lst.Show();
      cout<<"\n";

   system("PAUSE");
   lst.del();
}